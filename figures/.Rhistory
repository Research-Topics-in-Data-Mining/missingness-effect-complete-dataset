print(i)
mech <- mechs[j]
type <- types[k]
if(mech == "MCAR"){
type <- NULL
wtype <- mech
} else {
wtype <- type
}
data <- as.data.frame(mvrnorm(mu = c(10,10),
Sigma=matrix(data = c(1,0.5,0.5,1), byrow=TRUE, nrow=2),
n = N))
colnames(data) <- c('A','B')
mean_true <- mean(data$A)
sd_true <- sd(data$A)
median_true <- median(data$A)
iqr_true <- IQR(data$A)
skew_true <- (3*(mean(data$A) - median(data$A))) / sd(data$A)
data_amp <- ampute(data, prop = 0.5,
patterns = matrix(c(0, 1), byrow=TRUE, nrow=1),
mech = mech, type = type)$amp
data_mean <- mean(data_amp$A, na.rm = TRUE)
data_sd <- sd(data_amp$A, na.rm = TRUE)
data_median <- median(data_amp$A, na.rm=TRUE)
data_iqr <- IQR(data_amp$A, na.rm=TRUE)
bias_mean <- (data_mean - mean_true)/mean_true
bias_sd <- (data_sd - sd_true)/sd_true
bias_median <- (data_median - median_true)/median_true
bias_iqr <- (data_iqr - iqr_true)/iqr_true
result[i,] <- c(mech, wtype, 'no', round(skew_true,4),
round(bias_mean,4), round(bias_sd,4),
round(bias_median,4), round(bias_iqr,4))
i = i + 1
# create skew
data_skew <- data
prob_to_be_selected <- logistic(-data_skew$A)
prob_to_be_selected_mod <- prob_to_be_selected
prob_to_be_selected_mod[prob_to_be_selected_mod > 0.5] <- 0
#plot(data$A, prob_to_be_selected_mod)
selected <- rbinom(n=N, size=1, prob=prob_to_be_selected_mod)
values <- data_skew$A[prob_to_be_selected > 0.85]
data_skew$A[selected == 1] <- sample(x=values,
size=length(selected[selected == 1]),
replace=TRUE)
skew <- (3*(mean(data_skew$A) - median(data_skew$A))) / sd(data_skew$A)
mean_skew_true <- mean(data_skew$A)
sd_skew_true <- sd(data_skew$A)
median_skew_true <- median(data_skew$A)
iqr_skew_true <- IQR(data_skew$A)
data_amp_skew <- ampute(data_skew, prop = 0.5,
patterns = matrix(c(0, 1), byrow=TRUE, nrow=1),
mech = mech, type=type)$amp
data_mean_skew <- mean(data_amp_skew$A, na.rm = TRUE)
data_sd_skew <- sd(data_amp_skew$A, na.rm = TRUE)
data_median_skew <- median(data_amp_skew$A, na.rm = TRUE)
data_iqr_skew <- IQR(data_amp_skew$A, na.rm = TRUE)
bias_mean_skew <- (data_mean_skew - mean_skew_true)/mean_skew_true
bias_sd_skew <- (data_sd_skew - sd_skew_true)/sd_skew_true
bias_median_skew <- (data_median_skew - median_skew_true)/median_skew_true
bias_iqr_skew <- (data_iqr_skew - iqr_skew_true)/iqr_skew_true
result[i,] <- c(mech, wtype, 'yes', round(skew,4),
round(bias_mean_skew,4), round(bias_sd_skew,4),
round(bias_median_skew,4), round(bias_iqr_skew,4))
i = i + 1
result[i,] <- c(mech, wtype, 'diff', round(skew - skew_true,4),
round(bias_mean_skew - bias_mean,4),
round(bias_sd_skew - bias_sd,4),
round(bias_median_skew - bias_median,4),
round(bias_iqr_skew - bias_iqr,4))
i = i + 1
}
}
}
T = 10
N = 10000
mechs = c("MCAR", "MAR", "MNAR")
types = c("RIGHT", "LEFT", "MID", "TAIL")
result = as.data.frame(matrix(NA, nrow=T*3*4*3, ncol=8))
colnames(result) = c('mech', 'type', 'skew', 'amount', 'mean', 'sd', 'median', 'iqr')
logistic <- function(x) exp(x)/(1 + exp(x))
i <- 1
for(t in 1:T){
for(j in 1:3){
for(k in 1:4){
print(i)
mech <- mechs[j]
type <- types[k]
if(mech == "MCAR"){
type <- NULL
wtype <- mech
} else {
wtype <- type
}
data <- as.data.frame(mvrnorm(mu = c(10,10),
Sigma=matrix(data = c(1,0.5,0.5,1), byrow=TRUE, nrow=2),
n = N))
colnames(data) <- c('A','B')
mean_true <- mean(data$A)
sd_true <- sd(data$A)
median_true <- median(data$A)
iqr_true <- IQR(data$A)
skew_true <- (3*(mean(data$A) - median(data$A))) / sd(data$A)
data_amp <- ampute(data, prop = 0.5,
patterns = matrix(c(0, 1), byrow=TRUE, nrow=1),
mech = mech, type = type)$amp
data_mean <- mean(data_amp$A, na.rm = TRUE)
data_sd <- sd(data_amp$A, na.rm = TRUE)
data_median <- median(data_amp$A, na.rm=TRUE)
data_iqr <- IQR(data_amp$A, na.rm=TRUE)
bias_mean <- (data_mean - mean_true)/mean_true
bias_sd <- (data_sd - sd_true)/sd_true
bias_median <- (data_median - median_true)/median_true
bias_iqr <- (data_iqr - iqr_true)/iqr_true
result[i,] <- c(mech, wtype, 'no', round(skew_true,4),
round(bias_mean,4), round(bias_sd,4),
round(bias_median,4), round(bias_iqr,4))
i = i + 1
# create skew
data_skew <- data
prob_to_be_selected <- logistic(-data_skew$A)
prob_to_be_selected_mod <- prob_to_be_selected
prob_to_be_selected_mod[prob_to_be_selected_mod > 0.5] <- 0
#plot(data$A, prob_to_be_selected_mod)
selected <- rbinom(n=N, size=1, prob=prob_to_be_selected_mod)
values <- data_skew$A[prob_to_be_selected > 0.85 | prob_to_be_selected > 0.5]
data_skew$A[selected == 1] <- sample(x=values,
size=length(selected[selected == 1]),
replace=TRUE)
skew <- (3*(mean(data_skew$A) - median(data_skew$A))) / sd(data_skew$A)
mean_skew_true <- mean(data_skew$A)
sd_skew_true <- sd(data_skew$A)
median_skew_true <- median(data_skew$A)
iqr_skew_true <- IQR(data_skew$A)
data_amp_skew <- ampute(data_skew, prop = 0.5,
patterns = matrix(c(0, 1), byrow=TRUE, nrow=1),
mech = mech, type=type)$amp
data_mean_skew <- mean(data_amp_skew$A, na.rm = TRUE)
data_sd_skew <- sd(data_amp_skew$A, na.rm = TRUE)
data_median_skew <- median(data_amp_skew$A, na.rm = TRUE)
data_iqr_skew <- IQR(data_amp_skew$A, na.rm = TRUE)
bias_mean_skew <- (data_mean_skew - mean_skew_true)/mean_skew_true
bias_sd_skew <- (data_sd_skew - sd_skew_true)/sd_skew_true
bias_median_skew <- (data_median_skew - median_skew_true)/median_skew_true
bias_iqr_skew <- (data_iqr_skew - iqr_skew_true)/iqr_skew_true
result[i,] <- c(mech, wtype, 'yes', round(skew,4),
round(bias_mean_skew,4), round(bias_sd_skew,4),
round(bias_median_skew,4), round(bias_iqr_skew,4))
i = i + 1
result[i,] <- c(mech, wtype, 'diff', round(skew - skew_true,4),
round(bias_mean_skew - bias_mean,4),
round(bias_sd_skew - bias_sd,4),
round(bias_median_skew - bias_median,4),
round(bias_iqr_skew - bias_iqr,4))
i = i + 1
}
}
}
T = 10
N = 10000
mechs = c("MCAR", "MAR", "MNAR")
types = c("RIGHT", "LEFT", "MID", "TAIL")
result = as.data.frame(matrix(NA, nrow=T*3*4*3, ncol=8))
colnames(result) = c('mech', 'type', 'skew', 'amount', 'mean', 'sd', 'median', 'iqr')
logistic <- function(x) exp(x)/(1 + exp(x))
i <- 1
for(t in 1:T){
for(j in 1:3){
for(k in 1:4){
print(i)
mech <- mechs[j]
type <- types[k]
if(mech == "MCAR"){
type <- NULL
wtype <- mech
} else {
wtype <- type
}
data <- as.data.frame(mvrnorm(mu = c(10,10),
Sigma=matrix(data = c(1,0.5,0.5,1), byrow=TRUE, nrow=2),
n = N))
colnames(data) <- c('A','B')
mean_true <- mean(data$A)
sd_true <- sd(data$A)
median_true <- median(data$A)
iqr_true <- IQR(data$A)
skew_true <- (3*(mean(data$A) - median(data$A))) / sd(data$A)
data_amp <- ampute(data, prop = 0.5,
patterns = matrix(c(0, 1), byrow=TRUE, nrow=1),
mech = mech, type = type)$amp
data_mean <- mean(data_amp$A, na.rm = TRUE)
data_sd <- sd(data_amp$A, na.rm = TRUE)
data_median <- median(data_amp$A, na.rm=TRUE)
data_iqr <- IQR(data_amp$A, na.rm=TRUE)
bias_mean <- (data_mean - mean_true)/mean_true
bias_sd <- (data_sd - sd_true)/sd_true
bias_median <- (data_median - median_true)/median_true
bias_iqr <- (data_iqr - iqr_true)/iqr_true
result[i,] <- c(mech, wtype, 'no', round(skew_true,4),
round(bias_mean,4), round(bias_sd,4),
round(bias_median,4), round(bias_iqr,4))
i = i + 1
# create skew
data_skew <- data
prob_to_be_selected <- logistic(-data_skew$A)
prob_to_be_selected_mod <- prob_to_be_selected
prob_to_be_selected_mod[prob_to_be_selected_mod > 0.5] <- 0
#plot(data$A, prob_to_be_selected_mod)
selected <- rbinom(n=N, size=1, prob=prob_to_be_selected_mod)
values <- data_skew$A[prob_to_be_selected > 0.85 | prob_to_be_selected > 0.5]
data_skew$A[selected == 1] <- sample(x=values,
size=length(selected[selected == 1]),
replace=TRUE)
skew <- (3*(mean(data_skew$A) - median(data_skew$A))) / sd(data_skew$A)
mean_skew_true <- mean(data_skew$A)
sd_skew_true <- sd(data_skew$A)
median_skew_true <- median(data_skew$A)
iqr_skew_true <- IQR(data_skew$A)
data_amp_skew <- ampute(data_skew, prop = 0.5,
patterns = matrix(c(0, 1), byrow=TRUE, nrow=1),
mech = mech, type=type)$amp
data_mean_skew <- mean(data_amp_skew$A, na.rm = TRUE)
data_sd_skew <- sd(data_amp_skew$A, na.rm = TRUE)
data_median_skew <- median(data_amp_skew$A, na.rm = TRUE)
data_iqr_skew <- IQR(data_amp_skew$A, na.rm = TRUE)
bias_mean_skew <- (data_mean_skew - mean_skew_true)/mean_skew_true
bias_sd_skew <- (data_sd_skew - sd_skew_true)/sd_skew_true
bias_median_skew <- (data_median_skew - median_skew_true)/median_skew_true
bias_iqr_skew <- (data_iqr_skew - iqr_skew_true)/iqr_skew_true
result[i,] <- c(mech, wtype, 'yes', round(skew,4),
round(bias_mean_skew,4), round(bias_sd_skew,4),
round(bias_median_skew,4), round(bias_iqr_skew,4))
i = i + 1
result[i,] <- c(mech, wtype, 'diff', round(skew - skew_true,4),
round(bias_mean_skew - bias_mean,4),
round(bias_sd_skew - bias_sd,4),
round(bias_median_skew - bias_median,4),
round(bias_iqr_skew - bias_iqr,4))
i = i + 1
}
}
}
library(ggplot2)
library(tidyverse)
setwd("C:/Users/20200059/Documents/Github/missingness-effect-complete-dataset/figures/")
result <- read_csv("../csvs/final/synthetic.csv")
head(result)
result <- result %>%
mutate(type = ordered(factor(type),
levels = c('MCAR','LEFT','MID','TAIL','RIGHT')))
skews <- result %>%
group_by(mech, type, skew) %>%
summarize(skew = mean(skew))
View(result)
skews <- result %>%
group_by(mech, type, skew) %>%
summarize(skew = mean(amount))
skews
skews <- result %>%
group_by(mech, type, skew) %>%
summarize(am = mean(amount))
skews
skews <- result %>%
group_by(mech, type, skew) %>%
summarize(am = mean(amount)) %>%
filter(skew == 'yes')
skews
library(ggplot2)
library(readxl)
library(tidyverse)
library(RColorBrewer)
library(mice)
library(xtable)
setwd("C:/Users/20200059/Documents/Github/missingness-effect-complete-dataset/figures/")
datam <- read_csv("../csvs/final/averages.csv")
datas <- read_csv("../csvs/final/stds.csv")
dataa <- read_csv("../csvs/final/values_all.csv")
datam <- datam %>%
mutate(MCAR = ordered(factor(MCAR), levels = c(0,10,20))) %>%
mutate(MAR = ordered(factor(MAR), levels = c(0,10,20))) %>%
mutate(MNAR = ordered(factor(MNAR), levels = c(0,10,20)))
datas <- datas %>%
mutate(MCAR = ordered(factor(MCAR), levels = c(0,10,20))) %>%
mutate(MAR = ordered(factor(MAR), levels = c(0,10,20))) %>%
mutate(MNAR = ordered(factor(MNAR), levels = c(0,10,20)))
datam <- cbind(datam,datas)
colnames(datam) <- c(names(datam[1:18]), paste0('std_', names(datam[1:18]), sep = "", collapse = NULL))
cors <- dataaa %>%
mutate(bias = as.numeric(bias),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
filter(MCAR == '0') %>%
group_by(type) %>%
summarize(corbiasa = cor(bias, accuracy_a),
corbiasb = cor(bias, accuracy_b),
corstda = cor(bias_std, accuracy_a),
corstdb = cor(bias_std, accuracy_b),
n=n()) %>%
mutate(corbiasa_se = sqrt((1-corbiasa^2)/(n-2)),
corbiasb_se = sqrt((1-corbiasb^2)/(n-2)),
corstda_se = sqrt((1-corstda^2)/(n-2)),
corstdb_se = sqrt((1-corstdb^2)/(n-2)))
View(datam)
cors <- dataa %>%
mutate(bias = as.numeric(bias),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
filter(MCAR == '0') %>%
group_by(type) %>%
summarize(corbiasa = cor(bias, accuracy_a),
corbiasb = cor(bias, accuracy_b),
corstda = cor(bias_std, accuracy_a),
corstdb = cor(bias_std, accuracy_b),
n=n()) %>%
mutate(corbiasa_se = sqrt((1-corbiasa^2)/(n-2)),
corbiasb_se = sqrt((1-corbiasb^2)/(n-2)),
corstda_se = sqrt((1-corstda^2)/(n-2)),
corstdb_se = sqrt((1-corstdb^2)/(n-2)))
cors
cors <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
filter(MCAR == '0') %>%
group_by(type) %>%
summarize(corbiasa = cor(bias, accuracy_a),
corbiasb = cor(bias, accuracy_b),
corstda = cor(bias_std, accuracy_a),
corstdb = cor(bias_std, accuracy_b),
n=n()) %>%
mutate(corbiasa_se = sqrt((1-corbiasa^2)/(n-2)),
corbiasb_se = sqrt((1-corbiasb^2)/(n-2)),
corstda_se = sqrt((1-corstda^2)/(n-2)),
corstdb_se = sqrt((1-corstdb^2)/(n-2)))
cors
cors <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
filter(MCAR == '0') %>%
group_by(type) %>%
summarize(bias = mean(bias)) %>%
summarize(corbiasa = cor(bias, accuracy_a),
corbiasb = cor(bias, accuracy_b),
corstda = cor(bias_std, accuracy_a),
corstdb = cor(bias_std, accuracy_b),
n=n()) %>%
mutate(corbiasa_se = sqrt((1-corbiasa^2)/(n-2)),
corbiasb_se = sqrt((1-corbiasb^2)/(n-2)),
corstda_se = sqrt((1-corstda^2)/(n-2)),
corstdb_se = sqrt((1-corstdb^2)/(n-2)))
cors <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
filter(MCAR == '0') %>%
group_by(type) %>%
summarize(abias = mean(bias),
corbiasa = cor(bias, accuracy_a),
corbiasb = cor(bias, accuracy_b),
corstda = cor(bias_std, accuracy_a),
corstdb = cor(bias_std, accuracy_b),
n=n()) %>%
mutate(corbiasa_se = sqrt((1-corbiasa^2)/(n-2)),
corbiasb_se = sqrt((1-corbiasb^2)/(n-2)),
corstda_se = sqrt((1-corstda^2)/(n-2)),
corstdb_se = sqrt((1-corstdb^2)/(n-2)))
cors
cors <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
filter(MCAR == '0') %>%
group_by(type) %>%
summarize(abias = mean(bias),
astd = mean(bias_std),
corbiasa = cor(bias, accuracy_a),
corbiasb = cor(bias, accuracy_b),
corstda = cor(bias_std, accuracy_a),
corstdb = cor(bias_std, accuracy_b),
n=n()) %>%
mutate(corbiasa_se = sqrt((1-corbiasa^2)/(n-2)),
corbiasb_se = sqrt((1-corbiasb^2)/(n-2)),
corstda_se = sqrt((1-corstda^2)/(n-2)),
corstdb_se = sqrt((1-corstdb^2)/(n-2)))
cors
View(cors)
values <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
group_by(mech,type) %>%
summarize(abias = mean(bias),
astd = mean(bias_std),
n=n())
View(dataa)
values <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
group_by(MCAR,MAR,MNAR,type) %>%
summarize(abias = mean(bias),
astd = mean(bias_std),
n=n())
values
cors <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
filter(MCAR == '0') %>%
group_by(type) %>%
summarize(corbiasa = cor(bias, accuracy_a),
corbiasb = cor(bias, accuracy_b),
corstda = cor(bias_std, accuracy_a),
corstdb = cor(bias_std, accuracy_b),
n=n()) %>%
mutate(corbiasa_se = sqrt((1-corbiasa^2)/(n-2)),
corbiasb_se = sqrt((1-corbiasb^2)/(n-2)),
corstda_se = sqrt((1-corstda^2)/(n-2)),
corstdb_se = sqrt((1-corstdb^2)/(n-2)))
cors
corsa <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
bias_std = abs(as.numeric(bias_std))) %>%
filter(MCAR == '0') %>%
group_by(type) %>%
summarize(corbiasa = cor(bias, accuracy_a),
corbiasb = cor(bias, accuracy_b),
corstda = cor(bias_std, accuracy_a),
corstdb = cor(bias_std, accuracy_b),
n=n()) %>%
mutate(corbiasa_se = sqrt((1-corbiasa^2)/(n-2)),
corbiasb_se = sqrt((1-corbiasb^2)/(n-2)),
corstda_se = sqrt((1-corstda^2)/(n-2)),
corstdb_se = sqrt((1-corstdb^2)/(n-2)))
corsa <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
bias_std = abs(as.numeric(bias_std))) %>%
filter(MCAR == '0') %>%
group_by(type) %>%
summarize(corbiasa = cor(bias, accuracy_a),
corbiasb = cor(bias, accuracy_b),
corstda = cor(bias_std, accuracy_a),
corstdb = cor(bias_std, accuracy_b),
n=n()) %>%
mutate(corbiasa_se = sqrt((1-corbiasa^2)/(n-2)),
corbiasb_se = sqrt((1-corbiasb^2)/(n-2)),
corstda_se = sqrt((1-corstda^2)/(n-2)),
corstdb_se = sqrt((1-corstdb^2)/(n-2)))
corsa
View(corsa)
corsb <- dataa %>%
mutate(bias = as.numeric(bias),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
bias_std = as.numeric(bias_std)) %>%
filter(MCAR == '0') %>%
group_by(type) %>%
summarize(corbiasa = cor(bias, accuracy_a),
corbiasb = cor(bias, accuracy_b),
corstda = cor(bias_std, accuracy_a),
corstdb = cor(bias_std, accuracy_b),
n=n()) %>%
mutate(corbiasa_se = sqrt((1-corbiasa^2)/(n-2)),
corbiasb_se = sqrt((1-corbiasb^2)/(n-2)),
corstda_se = sqrt((1-corstda^2)/(n-2)),
corstdb_se = sqrt((1-corstdb^2)/(n-2)))
corsb
View(corsb)
pt(0.038/0.011, df = 8000, lower.tail = FALSE)
pt(0.046/0.011, df = 8000, lower.tail = FALSE)
pt(0.034/0.011, df = 8000, lower.tail = FALSE)
pt(0.015/0.011, df = 8000, lower.tail = FALSE)
pt(0.0145/0.011, df = 8000, lower.tail = FALSE)
pt(0.017/0.011, df = 8000, lower.tail = FALSE)
View(dataa)
values <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
mutate(skew = (3*(mean - median)/std)) %>%
group_by(MCAR,MAR,MNAR,type) %>%
summarize(abias = mean(bias),
astd = mean(bias_std),
n=n())
values
values <- dataa %>%
mutate(bias = abs(as.numeric(bias)),
accuracy_a = as.numeric(accuracy_a),
accuracy_b = as.numeric(accuracy_b),
std = as.numeric(std)) %>%
mutate(skew = (3*(mean - median)/std)) %>%
group_by(MCAR,MAR,MNAR,type) %>%
summarize(abias = mean(bias),
astd = mean(bias_std),
askew = mean(skew),
n=n())
values
View(values)
